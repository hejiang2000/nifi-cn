relationships:
  original: {en: The original HTML input, zh: 原始HTML输入}
  success: {en: Successfully parsed HTML element, zh: 已成功分析HTML元素}
  invalid html: {en: The input HTML syntax is invalid, zh: 输入的HTML语法无效}
  element not found: {en: Element could not be found in the HTML document. The original
      HTML input will remain in the FlowFile content unchanged. Relationship 'original'
      will not be invoked in this scenario., zh: 在HTML文档中找不到元素。原始HTML输入将保持FlowFile内容不变。在此方案中不会调用关系“original”。}
capabilityDescription: {en: 'Extracts HTML element values from the incoming flowfile''s
    content using a CSS selector. The incoming HTML is first converted into a HTML
    Document Object Model so that HTML elements may be selected in the similar manner
    that CSS selectors are used to apply styles to HTML. The resulting HTML DOM is
    then "queried" using the user defined CSS selector string. The result of "querying"
    the HTML DOM may produce 0-N results. If no results are found the flowfile will
    be transferred to the "element not found" relationship to indicate so to the end
    user. If N results are found a new flowfile will be created and emitted for each
    result. The query result will either be placed in the content of the new flowfile
    or as an attribute of the new flowfile. By default the result is written to an
    attribute. This can be controlled by the "Destination" property. Resulting query
    values may also have data prepended or appended to them by setting the value of
    property "Prepend Element Value" or "Append Element Value". Prepended and appended
    values are treated as string values and concatenated to the result retrieved from
    the HTML DOM query operation. A more thorough reference for the CSS selector syntax
    can be found at "http://jsoup.org/apidocs/org/jsoup/select/Selector.html"', zh: '使用CSS选择器从传入流文件的内容中提取HTML元素值。传入的HTML首先被转换为HTML文档对象模型，这样HTML元素可以以类似于CSS选择器用于将样式应用于HTML的方式被选择。然后使用用户定义的CSS选择器字符串“查询”生成的HTML
    DOM。“查询”HTML DOM的结果可能会产生0-N个结果。如果没有找到结果，则将流文件传输到“元素未找到”关系，以向最终用户表明这一点。如果找到N个结果，将为每个结果创建并发出一个新的流文件。查询结果将被放置在新的流文件的内容中，或者作为新流文件的属性。默认情况下，结果将写入属性。这可以由“Destination”属性控制。通过设置属性“Prepend
    Element value”或“Append Element value”的值，生成的查询值也可以预先或附加数据。前置值和附加值被视为字符串值，并连接到从HTML
    DOM查询操作检索的结果。有关CSS选择器语法的更详细参考，请参阅“http://jsoup.org/apidocs/org/jsoup/select/Selector.html"'}
properties:
  Destination:
    en: {displayName: Destination, description: Control if element extracted is written
        as a flowfile attribute or as flowfile content.}
    zh: {description: 控制提取的元素是作为流文件属性还是作为流文件内容写入。, displayName: 目的地}
  Output Type:
    en: {displayName: Output Type, description: Controls the type of DOM value that
        is retrieved from the HTML element.}
    zh: {description: 控制从HTML元素检索的DOM值的类型。, displayName: 输出类型}
  Append Element Value:
    en: {displayName: Append Element Value, description: Appends the specified value
        to the resulting Element}
    zh: {description: 将指定值追加到结果元素, displayName: 附加元素值}
  Attribute Name:
    en: {displayName: Attribute Name, description: 'When getting the value of a HTML
        element attribute this value is used as the key to determine which attribute
        on the selected element should be retrieved. This value is used when the "Output
        Type" is set to "Attribute". If this value is prefixed with ''abs:'', then
        the extracted attribute value will be converted into an absolute URL form
        using the specified base URL.'}
    zh: {description: '当获取HTML元素属性的值时，该值用作键，以确定应检索所选元素的哪个属性。当“输出类型”设置为“属性”时，使用该值。如果此值前缀为“abs:”，则提取的属性值将使用指定的基本URL转换为绝对URL形式。',
      displayName: 属性名称}
  HTML Character Encoding:
    en: {displayName: HTML Character Encoding, description: Character encoding of
        the input HTML}
    zh: {description: 输入HTML的字符编码, displayName: HTML字符编码}
  URL:
    en: {displayName: URL, description: Base URL for the HTML page being parsed. This
        URL will be used to resolve an absolute URL when an attribute value is extracted
        from a HTML element.}
    zh: {description: 正在分析的HTML页的基URL。当从HTML元素中提取属性值时，此URL将用于解析绝对URL。, displayName: 统一资源定位地址}
  CSS Selector:
    en: {displayName: CSS Selector, description: CSS selector syntax string used to
        extract the desired HTML element(s).}
    zh: {description: 用于提取所需HTML元素的CSS选择器语法字符串。, displayName: CSS选择器}
  Prepend Element Value:
    en: {displayName: Prepend Element Value, description: Prepends the specified value
        to the resulting Element}
    zh: {description: 将指定值前置到结果元素, displayName: 前置元素值}
writeAttributes:
  HTMLElement: {en: Flowfile attribute where the element result parsed from the HTML
      using the CSS selector syntax are placed if the destination is a flowfile attribute.,
    zh: 如果目标是Flowfile属性，则放置使用CSS选择器语法从HTML解析的元素结果。}
tags:
  en: [get, html, dom, css, element]
  zh: [收到, html格式, 多姆, css格式, 要素]
