relationships:
  matched: {en: FlowFiles are routed to this relationship when the Regular Expression
      is successfully evaluated and the FlowFile is modified as a result, zh: 当成功计算正则表达式并因此修改FlowFile时，FlowFiles将路由到此关系}
  unmatched: {en: FlowFiles are routed to this relationship when no provided Regular
      Expression matches the content of the FlowFile, zh: 当没有提供的正则表达式与FlowFile的内容匹配时，FlowFiles将路由到此关系}
dynamicProperties:
  A FlowFile attribute:
    en: {description: 'The first capture group, if any found, will be placed into
        that attribute name.But all capture groups, including the matching string
        sequence itself will also be provided at that attribute name with an index
        value provided.', value: A Regular Expression with one or more capturing group}
    zh: {description: 第一个捕获组（如果找到）将被放入该属性名称中。但所有捕获组，包括匹配的字符串序列本身，也将在该属性名称处提供索引值。,
      value: 具有一个或多个捕获组的正则表达式}
capabilityDescription: {en: 'Evaluates one or more Regular Expressions against the
    content of a FlowFile.  The results of those Regular Expressions are assigned
    to FlowFile Attributes.  Regular Expressions are entered by adding user-defined
    properties; the name of the property maps to the Attribute Name into which the
    result will be placed.  The attributes are generated differently based on the
    enabling of named capture groups.  If named capture groups are not enabled:  The
    first capture group, if any found, will be placed into that attribute name.But
    all capture groups, including the matching string sequence itself will also be
    provided at that attribute name with an index value provided, with the exception
    of a capturing group that is optional and does not match - for example, given
    the attribute name "regex" and expression "abc(def)?(g)" we would add an attribute
    "regex.1" with a value of "def" if the "def" matched. If the "def" did not match,
    no attribute named "regex.1" would be added but an attribute named "regex.2" with
    a value of "g" will be added regardless.If named capture groups are enabled:  Each
    named capture group, if found will be placed into the attributes name with the
    name provided.  If enabled the matching string sequence itself will be placed
    into the attribute name.  If multiple matches are enabled, and index will be applied
    after the first set of matches. The exception is a capturing group that is optional
    and does not match  For example, given the attribute name "regex" and expression
    "abc(?<NAMED>def)?(?<NAMED-TWO>g)"  we would add an attribute "regex.NAMED" with
    the value of "def" if the "def" matched.  We would   add an attribute "regex.NAMED-TWO"
    with the value of "g" if the "g" matched regardless.  The value of the property
    must be a valid Regular Expressions with one or more capturing groups. If named
    capture groups are enabled, all capture groups must be named.  If they are not,
    then the  processor configuration will fail validation.  If the Regular Expression
    matches more than once, only the first match will be used unless the property
    enabling repeating capture group is set to true. If any provided Regular Expression
    matches, the FlowFile(s) will be routed to ''matched''. If no provided Regular
    Expression matches, the FlowFile will be routed to ''unmatched'' and no attributes
    will be applied to the FlowFile.', zh: 根据FlowFile的内容计算一个或多个正则表达式。这些正则表达式的结果将指定给FlowFile属性。通过添加用户定义的属性来输入正则表达式；属性的名称映射到结果将放置的“属性名称”。根据命名捕获组的启用，属性的生成方式不同。如果未启用命名的捕获组：如果找到第一个捕获组，则将将其放入该属性名称中。但所有捕获组，包括匹配的字符串序列本身，也将在该属性名称处提供索引值，但可选且不匹配的捕获组除外-例如，给定属性名称“regex”和表达式“abc（def）？（g）”，如果“def”匹配，我们将添加值为“def的属性“regex.1”。如果“def”不匹配，则不会添加名为“regex.1”的属性，但会添加一个名为“regx.2”且值为“g”的属性。如果启用了命名捕获组：如果找到每个命名捕获组，将使用提供的名称将其放入属性名称中。如果启用，匹配的字符串序列本身将被放入属性名称中。如果启用了多个匹配项，则将在第一组匹配项之后应用索引。例外情况是一个可选且不匹配的捕获组。例如，给定属性名称“regex”和表达式“abc（？＜NAMED＞def）？（？＜NAMED＞TWO＞g）”，如果“def”匹配，我们将添加一个值为“def的属性“regex.NAMED”。如果“g”匹配，我们将添加一个值为“g”的属性“regex.NAMED-TWO”。属性的值必须是具有一个或多个捕获组的有效正则表达式。如果已启用命名捕获组，则必须命名所有捕获组。如果没有，则处理器配置将无法通过验证。如果正则表达式匹配多次，则仅使用第一次匹配，除非启用重复捕获组的属性设置为true。如果提供的任何正则表达式匹配，FlowFile将被路由到“匹配”。如果没有提供的正则表达式匹配，FlowFile将被路由到“不匹配”，并且不会将任何属性应用于FlowFile。}
properties:
  Enable Unicode Predefined Character Classes:
    en: {displayName: Enable Unicode Predefined Character Classes, description: 'Specifies
        conformance with the Unicode Technical Standard #18: Unicode Regular Expression
        Annex C: Compatibility Properties.  Can also be specified via the embedded
        flag (?U).'}
    zh: {description: '指定与Unicode技术标准#18:Unicode正则表达式附录C：兼容性属性的一致性。也可以通过嵌入式标志（？U）指定。',
      displayName: 启用Unicode预定义字符类}
  Permit Whitespace and Comments in Pattern:
    en: {displayName: Permit Whitespace and Comments in Pattern, description: 'In
        this mode, whitespace is ignored, and embedded comments starting with # are
        ignored until the end of a line.  Can also be specified via the embedded flag
        (?x).'}
    zh: {description: 在这种模式下，空格被忽略，以#开头的嵌入注释被忽略，直到行尾。也可以通过嵌入标志（？x）指定。, displayName: 允许模式中的空白和注释}
  Enable Unicode-aware Case Folding:
    en: {displayName: Enable Unicode-aware Case Folding, description: 'When used with
        ''Enable Case-insensitive Matching'', matches in a manner consistent with
        the Unicode Standard.  Can also be specified via the embedded flag (?u).'}
    zh: {description: 与“启用不区分大小写匹配”一起使用时，匹配方式与Unicode标准一致。也可以通过嵌入标志（？u）指定。, displayName: 启用支持Unicode的大小写折叠}
  Enable DOTALL Mode:
    en: {displayName: Enable DOTALL Mode, description: 'Indicates that the expression
        ''.'' should match any character, including a line terminator.  Can also be
        specified via the embedded flag (?s).'}
    zh: {description: 指示表达式“.”应匹配任何字符，包括行终止符。也可以通过嵌入标志指定。, displayName: 启用DOTALL模式}
  Enable Unix Lines Mode:
    en:
      displayName: Enable Unix Lines Mode
      description: |-
        Indicates that only the '
        ' line terminator is recognized in the behavior of '.', '^', and '$'.  Can also be specified via the embedded flag (?d).
    zh: {description: 表示只有', displayName: 启用Unix行模式}
  extract-text-enable-named-groups:
    en: {displayName: Enable named group support, description: 'If set to true, when
        named groups are present in the regular expression, the name of the group
        will be used in the attribute name as opposed to the group index.  All capturing
        groups must be named, if the number of groups (not including capture group
        0) does not equal the number of named groups validation will fail.'}
    zh: {description: 如果设置为true，则当命名组出现在正则表达式中时，将在属性名称中使用组的名称，而不是组索引。如果组数（不包括捕获组0）不等于命名组数，则必须命名所有捕获组。验证将失败。,
      displayName: 启用命名组支持}
  Maximum Buffer Size:
    en: {displayName: Maximum Buffer Size, description: Specifies the maximum amount
        of data to buffer (per file) in order to apply the regular expressions.  Files
        larger than the specified maximum will not be fully evaluated.}
    zh: {description: 指定要缓冲的最大数据量（每个文件），以便应用正则表达式。将不会完全评估大于指定最大值的文件。, displayName: 最大缓冲区大小}
  Enable Canonical Equivalence:
    en: {displayName: Enable Canonical Equivalence, description: Indicates that two
        characters match only when their full canonical decompositions match.}
    zh: {description: 指示两个字符仅在其完全规范分解匹配时匹配。, displayName: 启用标准等效}
  Enable Case-insensitive Matching:
    en: {displayName: Enable Case-insensitive Matching, description: 'Indicates that
        two characters match even if they are in a different case.  Can also be specified
        via the embedded flag (?i).'}
    zh: {description: 指示两个字符匹配，即使它们的大小写不同。也可以通过嵌入标志（？i）指定。, displayName: 启用不区分大小写的匹配}
  Enable Multiline Mode:
    en: {displayName: Enable Multiline Mode, description: 'Indicates that ''^'' and
        ''$'' should match just after and just before a line terminator or end of
        sequence, instead of only the beginning or end of the entire input.  Can also
        be specified via the embeded flag (?m).'}
    zh: {description: 指示“^”和“$”应在行终止符或序列结尾之后和之前匹配，而不是仅在整个输入的开头或结尾匹配。也可以通过嵌入标志（？m）指定。,
      displayName: 启用多行模式}
  Maximum Capture Group Length:
    en: {displayName: Maximum Capture Group Length, description: Specifies the maximum
        number of characters a given capture group value can have.  Any characters
        beyond the max will be truncated.}
    zh: {description: 指定给定捕获组值可以包含的最大字符数。超出最大值的任何字符都将被截断。, displayName: 最大捕获组长度}
  Enable Literal Parsing of the Pattern:
    en: {displayName: Enable Literal Parsing of the Pattern, description: Indicates
        that Metacharacters and escape characters should be given no special meaning.}
    zh: {description: 指示不应为元字符和转义字符赋予特殊含义。, displayName: 启用模式的文本分析}
  Character Set:
    en: {displayName: Character Set, description: The Character Set in which the file
        is encoded}
    zh: {description: 文件编码的字符集, displayName: 字符集}
  Include Capture Group 0:
    en: {displayName: Include Capture Group 0, description: 'Indicates that Capture
        Group 0 should be included as an attribute. Capture Group 0 represents the
        entirety of the regular expression match, is typically not used, and could
        have considerable length.'}
    zh: {description: 指示捕获组0应作为属性包含。捕获组0表示整个正则表达式匹配，通常不使用，并且可能具有相当长的长度。, displayName: 包括捕获组0}
  extract-text-enable-repeating-capture-group:
    en: {displayName: Enable repeating capture group, description: 'If set to true,
        every string matching the capture groups will be extracted. Otherwise, if
        the Regular Expression matches more than once, only the first match will be
        extracted.'}
    zh: {description: 如果设置为true，将提取与捕获组匹配的每个字符串。否则，如果正则表达式匹配多次，则只提取第一个匹配。, displayName: 启用重复捕获组}
tags:
  en: [evaluate, extract, Text, Regular Expression, regex]
  zh: [估计, 摘录, 文本, 正则表达式, 正则表达式]
