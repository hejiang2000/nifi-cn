relationships:
  matched: {en: FlowFiles are routed to this relationship when the Grok Expression
      is successfully evaluated and the FlowFile is modified as a result, zh: 当成功计算Grok表达式并因此修改FlowFile时，FlowFiles将路由到此关系}
  unmatched: {en: FlowFiles are routed to this relationship when no provided Grok
      Expression matches the content of the FlowFile, zh: 当没有提供的Grok表达式与FlowFile的内容匹配时，FlowFiles被路由到此关系}
capabilityDescription: {en: 'Evaluates one or more Grok Expressions against the content
    of a FlowFile, adding the results as attributes or replacing the content of the
    FlowFile with a JSON notation of the matched content', zh: 根据FlowFile的内容计算一个或多个Grok表达式，将结果添加为属性或用匹配内容的JSON表示法替换FlowFile的属性}
properties:
  Grok Expression:
    en: {displayName: Grok Expression, description: 'Grok expression. If other Grok
        expressions are referenced in this expression, they must be provided in the
        Grok Pattern File if set or exist in the default Grok patterns'}
    zh: {description: 格罗克表情。如果此表达式中引用了其他Grok表达式，则如果在默认Grok模式中设置或存在，则必须在Grok模式文件中提供这些表达式,
      displayName: Grok表达式}
  Destination:
    en: {displayName: Destination, description: 'Control if Grok output value is written
        as a new flowfile attributes, in this case each of the Grok identifier that
        is matched in the flowfile will be added as an attribute, prefixed with "grok."
        or written in the flowfile content. Writing to flowfile content will overwrite
        any existing flowfile content.'}
    zh: {description: 控制Grok输出值是否作为新的流文件属性写入，在这种情况下，流文件中匹配的每个Grok标识符都将作为属性添加，前缀为“Grok.”或写入流文件内容。写入流文件内容将覆盖任何现有的流文件内容。,
      displayName: 目的地}
  Keep Empty Captures:
    en: {displayName: Keep Empty Captures, description: 'If true, then empty capture
        values will be included in the returned capture map.'}
    zh: {description: 如果为true，则返回的捕获映射中将包含空的捕获值。, displayName: 保留空捕获}
  Grok Pattern file:
    en: {displayName: Grok Patterns, description: Custom Grok pattern definitions.
        These definitions will be loaded after the default Grok patterns. The Grok
        Parser will use the default Grok patterns when this property is not configured.}
    zh: {description: 自定义Grok模式定义。这些定义将在默认Grok模式之后加载。当未配置此属性时，Grok解析器将使用默认的Grok模式。,
      displayName: Grok模式}
  Character Set:
    en: {displayName: Character Set, description: The Character Set in which the file
        is encoded}
    zh: {description: 文件编码的字符集, displayName: 字符集}
  Maximum Buffer Size:
    en: {displayName: Maximum Buffer Size, description: Specifies the maximum amount
        of data to buffer (per file) in order to apply the Grok expressions. Files
        larger than the specified maximum will not be fully evaluated.}
    zh: {description: 指定要缓冲的最大数据量（每个文件），以便应用Grok表达式。将不会完全评估大于指定最大值的文件。, displayName: 最大缓冲区大小}
  Named captures only:
    en: {displayName: Named captures only, description: Only store named captures
        from grok}
    zh: {description: 仅存储来自grok的命名捕获, displayName: 仅命名捕获}
writeAttributes:
  grok.XXX: {en: 'When operating in flowfile-attribute mode, each of the Grok identifier
      that is matched in the flowfile will be added as an attribute, prefixed with
      "grok." For example,if the grok identifier "timestamp" is matched, then the
      value will be added to an attribute named "grok.timestamp"', zh: 在流文件属性模式下操作时，流文件中匹配的每个Grok标识符都将作为一个属性添加，前缀为“Grok”。例如，如果Grok标识符“timestamp”匹配，则该值将添加到名为“Grok.timestamp}
tags:
  en: [grok, log, text, parse, delimit, extract]
  zh: [组, 日志, 文本, 作语法分析, 划界, 摘录]
