capabilityDescription: {en: 'Parses JSON into individual Record objects. While the
    reader expects each record to be well-formed JSON, the content of a FlowFile may
    consist of many records, each as a well-formed JSON array or JSON object with
    optional whitespace between them, such as the common ''JSON-per-line'' format.
    If an array is encountered, each element in that array will be treated as a separate
    record. If the schema that is configured contains a field that is not present
    in the JSON, a null value will be used. If the JSON contains a field that is not
    present in the schema, that field will be skipped. See the Usage of the Controller
    Service for more information and examples.', zh: 将JSON解析为单个Record对象。虽然读者希望每条记录都是格式良好的JSON，但FlowFile的内容可能包含许多记录，每个记录都是一个格式良好的JSON数组或JSON对象，它们之间有可选的空格，例如常见的“每行JSON”格式。如果遇到数组，该数组中的每个元素都将被视为单独的记录。如果配置的模式包含JSON中不存在的字段，则将使用空值。如果JSON包含模式中不存在的字段，则将跳过该字段。有关更多信息和示例，请参阅控制器服务的使用。}
properties:
  schema-branch:
    en: {displayName: Schema Branch, description: 'Specifies the name of the branch
        to use when looking up the schema in the Schema Registry property. If the
        chosen Schema Registry does not support branching, this value will be ignored.'}
    zh: {description: 指定在“架构注册表”属性中查找架构时要使用的分支的名称。如果所选的架构注册表不支持分支，则将忽略此值。, displayName: 架构分支}
  schema-application-strategy:
    en: {displayName: Schema Application Strategy, description: Specifies whether
        the schema is defined for the whole JSON or for the selected part starting
        from "Starting Field Name".}
    zh: {description: 指定是为整个JSON还是为从“起始字段名”开始的选定部分定义架构。, displayName: 架构应用策略}
  Timestamp Format:
    en: {displayName: Timestamp Format, description: 'Specifies the format to use
        when reading/writing Timestamp fields. If not specified, Timestamp fields
        will be assumed to be number of milliseconds since epoch (Midnight, Jan 1,
        1970 GMT). If specified, the value must match the Java Simple Date Format
        (for example, MM/dd/yyyy HH:mm:ss for a two-digit month, followed by a two-digit
        day, followed by a four-digit year, all separated by ''/'' characters; and
        then followed by a two-digit hour in 24-hour format, followed by a two-digit
        minute, followed by a two-digit second, all separated by '':'' characters,
        as in 01/01/2017 18:04:15).'}
    zh: {description: '指定读取/写入时间戳字段时使用的格式。如果未指定，则时间戳字段将假定为自纪元（1970年1月1日午夜）以来的毫秒数。如果指定，则该值必须与Java简单日期格式匹配（例如，MM/dd/yyyy
        HH:MM:ss表示两位数的月份，后跟两位数的日期，后跟四位数的年份，均以“/”字符分隔；然后，后跟24小时格式的两位数的小时，后跟两位的分钟，然后是两位数的秒，全部以“：”字符分隔，如2017年1月1日18:04:15所示）。',
      displayName: 时间戳格式}
  schema-inference-cache:
    en: {displayName: Schema Inference Cache, description: 'Specifies a Schema Cache
        to use when inferring the schema. If not populated, the schema will be inferred
        each time. However, if a cache is specified, the cache will first be consulted
        and if the applicable schema can be found, it will be used instead of inferring
        the schema.'}
    zh: {description: 指定推断架构时要使用的架构缓存。如果未填充，则每次都将推断出架构。但是，如果指定了缓存，将首先查询缓存，如果可以找到适用的模式，则将使用该模式而不是推断模式。,
      displayName: 架构推理缓存}
  Date Format:
    en: {displayName: Date Format, description: 'Specifies the format to use when
        reading/writing Date fields. If not specified, Date fields will be assumed
        to be number of milliseconds since epoch (Midnight, Jan 1, 1970 GMT). If specified,
        the value must match the Java Simple Date Format (for example, MM/dd/yyyy
        for a two-digit month, followed by a two-digit day, followed by a four-digit
        year, all separated by ''/'' characters, as in 01/01/2017).'}
    zh: {description: 指定读取/写入日期字段时使用的格式。如果未指定，日期字段将假定为自纪元（1970年1月1日午夜）以来的毫秒数。如果指定，则该值必须与Java简单日期格式匹配（例如，MM/dd/yyyy表示两位数的月份，后跟两位数的日期，后跟四位数的年份，均由“/”字符分隔，如2017年1月1日）。,
      displayName: 日期格式}
  schema-name:
    en: {displayName: Schema Name, description: Specifies the name of the schema to
        lookup in the Schema Registry property}
    zh: {description: 指定要在“架构注册表”属性中查找的架构的名称, displayName: 架构名称}
  starting-field-strategy:
    en: {displayName: Starting Field Strategy, description: Start processing from
        the root node or from a specified nested node.}
    zh: {description: 从根节点或指定的嵌套节点开始处理。, displayName: 启动现场策略}
  schema-registry:
    en: {displayName: Schema Registry, description: Specifies the Controller Service
        to use for the Schema Registry}
    zh: {description: 指定用于架构注册表的控制器服务, displayName: 架构注册表}
  starting-field-name:
    en: {displayName: Starting Field Name, description: Skips forward to the given
        nested JSON field (array or object) to begin processing.}
    zh: {description: 向前跳转到给定的嵌套JSON字段（数组或对象）以开始处理。, displayName: 起始字段名称}
  Time Format:
    en: {displayName: Time Format, description: 'Specifies the format to use when
        reading/writing Time fields. If not specified, Time fields will be assumed
        to be number of milliseconds since epoch (Midnight, Jan 1, 1970 GMT). If specified,
        the value must match the Java Simple Date Format (for example, HH:mm:ss for
        a two-digit hour in 24-hour format, followed by a two-digit minute, followed
        by a two-digit second, all separated by '':'' characters, as in 18:04:15).'}
    zh: {description: '指定读取/写入时间字段时使用的格式。如果未指定，“时间”字段将假定为自纪元（1970年1月1日午夜）以来的毫秒数。如果指定，则该值必须与Java简单日期格式匹配（例如，HH:mm:ss表示24小时格式的两位数小时，后跟两位数分钟，后跟两位秒，均以“：”字符分隔，如18:04:15所示）。',
      displayName: 时间格式}
  schema-access-strategy:
    en: {displayName: Schema Access Strategy, description: Specifies how to obtain
        the schema that is to be used for interpreting the data.}
    zh: {description: 指定如何获取用于解释数据的架构。, displayName: 架构访问策略}
  schema-version:
    en: {displayName: Schema Version, description: Specifies the version of the schema
        to lookup in the Schema Registry. If not specified then the latest version
        of the schema will be retrieved.}
    zh: {description: 指定要在架构注册表中查找的架构的版本。如果未指定，则将检索架构的最新版本。, displayName: 架构版本}
  schema-text:
    en: {displayName: Schema Text, description: The text of an Avro-formatted Schema}
    zh: {description: Avro格式架构的文本, displayName: 架构文本}
tags:
  en: [json, tree, record, reader, parser]
  zh: [json文件, 树, 记录, 读者, 解析器]
