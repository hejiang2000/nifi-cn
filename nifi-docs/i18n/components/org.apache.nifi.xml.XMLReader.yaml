capabilityDescription: {en: 'Reads XML content and creates Record objects. Records
    are expected in the second level of XML data, embedded in an enclosing root tag.',
  zh: 读取XML内容并创建Record对象。记录应位于第二层XML数据中，嵌入在封闭的根标记中。}
properties:
  content_field_name:
    en: {displayName: Field Name for Content, description: 'If tags with content (e.
        g. <field>content</field>) are defined as nested records in the schema, the
        name of the tag will be used as name for the record and the value of this
        property will be used as name for the field. If tags with content shall be
        parsed together with attributes (e. g. <field attribute="123">content</field>),
        they have to be defined as records. In such a case, the name of the tag will
        be used as the name for the record and  the value of this property will be
        used as the name for the field holding the original content. The name of the
        attribute will be used to create a new record field, the content of which
        will be the value of the attribute. For more information, see the ''Additional
        Details...'' section of the XMLReader controller service''s documentation.'}
    zh: {description: 如果带有内容的标记（例如<field>content</field>）被定义为模式中的嵌套记录，则标记的名称将用作记录的名称，此属性的值将用作字段的名称。如果带有内容的标签应与属性一起解析（例如<field
        attribute=“123”>content</field>），则必须将其定义为记录。在这种情况下，标记的名称将用作记录的名称，此属性的值将用作保存原始内容的字段的名称。属性的名称将用于创建新的记录字段，其内容将是属性的值。有关更多信息，请参阅XMLReader控制器服务文档的“AdditionalDetails…”部分。,
      displayName: 内容的字段名称}
  schema-branch:
    en: {displayName: Schema Branch, description: 'Specifies the name of the branch
        to use when looking up the schema in the Schema Registry property. If the
        chosen Schema Registry does not support branching, this value will be ignored.'}
    zh: {description: 指定在“架构注册表”属性中查找架构时要使用的分支的名称。如果所选的架构注册表不支持分支，则将忽略此值。, displayName: 架构分支}
  Timestamp Format:
    en: {displayName: Timestamp Format, description: 'Specifies the format to use
        when reading/writing Timestamp fields. If not specified, Timestamp fields
        will be assumed to be number of milliseconds since epoch (Midnight, Jan 1,
        1970 GMT). If specified, the value must match the Java Simple Date Format
        (for example, MM/dd/yyyy HH:mm:ss for a two-digit month, followed by a two-digit
        day, followed by a four-digit year, all separated by ''/'' characters; and
        then followed by a two-digit hour in 24-hour format, followed by a two-digit
        minute, followed by a two-digit second, all separated by '':'' characters,
        as in 01/01/2017 18:04:15).'}
    zh: {description: '指定读取/写入时间戳字段时使用的格式。如果未指定，则时间戳字段将假定为自纪元（1970年1月1日午夜）以来的毫秒数。如果指定，则该值必须与Java简单日期格式匹配（例如，MM/dd/yyyy
        HH:MM:ss表示两位数的月份，后跟两位数的日期，后跟四位数的年份，均以“/”字符分隔；然后，后跟24小时格式的两位数的小时，后跟两位的分钟，然后是两位数的秒，全部以“：”字符分隔，如2017年1月1日18:04:15所示）。',
      displayName: 时间戳格式}
  schema-inference-cache:
    en: {displayName: Schema Inference Cache, description: 'Specifies a Schema Cache
        to use when inferring the schema. If not populated, the schema will be inferred
        each time. However, if a cache is specified, the cache will first be consulted
        and if the applicable schema can be found, it will be used instead of inferring
        the schema.'}
    zh: {description: 指定推断架构时要使用的架构缓存。如果未填充，则每次都将推断出架构。但是，如果指定了缓存，将首先查询缓存，如果可以找到适用的模式，则将使用该模式而不是推断模式。,
      displayName: 架构推理缓存}
  Date Format:
    en: {displayName: Date Format, description: 'Specifies the format to use when
        reading/writing Date fields. If not specified, Date fields will be assumed
        to be number of milliseconds since epoch (Midnight, Jan 1, 1970 GMT). If specified,
        the value must match the Java Simple Date Format (for example, MM/dd/yyyy
        for a two-digit month, followed by a two-digit day, followed by a four-digit
        year, all separated by ''/'' characters, as in 01/01/2017).'}
    zh: {description: 指定读取/写入日期字段时使用的格式。如果未指定，日期字段将假定为自纪元（1970年1月1日午夜）以来的毫秒数。如果指定，则该值必须与Java简单日期格式匹配（例如，MM/dd/yyyy表示两位数的月份，后跟两位数的日期，后跟四位数的年份，均由“/”字符分隔，如2017年1月1日）。,
      displayName: 日期格式}
  parse_xml_attributes:
    en: {displayName: Parse XML Attributes, description: 'When ''Schema Access Strategy''
        is ''Infer Schema'' and this property is ''true'' then XML attributes are
        parsed and added to the record as new fields. When the schema is inferred
        but this property is ''false'', XML attributes and their values are ignored.'}
    zh: {description: 当“架构访问策略”为“推断架构”且此属性为“true”时，XML属性将被解析并作为新字段添加到记录中。当推断出架构但此属性为“false”时，将忽略XML属性及其值。,
      displayName: 分析XML属性}
  record_format:
    en: {displayName: Expect Records as Array, description: 'This property defines
        whether the reader expects a FlowFile to consist of a single Record or a series
        of Records with a "wrapper element". Because XML does not provide for a way
        to read a series of XML documents from a stream directly, it is common to
        combine many XML documents by concatenating them and then wrapping the entire
        XML blob  with a "wrapper element". This property dictates whether the reader
        expects a FlowFile to consist of a single Record or a series of Records with
        a "wrapper element" that will be ignored.'}
    zh: {description: 此属性定义读取器是否希望FlowFile由单个记录或一系列具有“包装器元素”的记录组成。因为XML不提供直接从流中读取一系列XML文档的方法，所以通常通过将多个XML文档串联起来，然后用“包装器元素”包装整个XML
        blob来组合它们。此属性指定读取器是否希望FlowFile由单个记录或一系列具有“包装器元素”的记录组成，该元素将被忽略。, displayName: 预期记录为阵列}
  attribute_prefix:
    en: {displayName: Attribute Prefix, description: 'If this property is set, the
        name of attributes will be prepended with a prefix when they are added to
        a record.'}
    zh: {description: 如果设置了此属性，则在将属性添加到记录中时，将在属性名称前加上前缀。, displayName: 属性前缀（Attribute
        Prefix）}
  schema-name:
    en: {displayName: Schema Name, description: Specifies the name of the schema to
        lookup in the Schema Registry property}
    zh: {description: 指定要在“架构注册表”属性中查找的架构的名称, displayName: 架构名称}
  schema-registry:
    en: {displayName: Schema Registry, description: Specifies the Controller Service
        to use for the Schema Registry}
    zh: {description: 指定用于架构注册表的控制器服务, displayName: 架构注册表}
  Time Format:
    en: {displayName: Time Format, description: 'Specifies the format to use when
        reading/writing Time fields. If not specified, Time fields will be assumed
        to be number of milliseconds since epoch (Midnight, Jan 1, 1970 GMT). If specified,
        the value must match the Java Simple Date Format (for example, HH:mm:ss for
        a two-digit hour in 24-hour format, followed by a two-digit minute, followed
        by a two-digit second, all separated by '':'' characters, as in 18:04:15).'}
    zh: {description: '指定读取/写入时间字段时使用的格式。如果未指定，“时间”字段将假定为自纪元（1970年1月1日午夜）以来的毫秒数。如果指定，则该值必须与Java简单日期格式匹配（例如，HH:mm:ss表示24小时格式的两位数小时，后跟两位数分钟，后跟两位秒，均以“：”字符分隔，如18:04:15所示）。',
      displayName: 时间格式}
  schema-access-strategy:
    en: {displayName: Schema Access Strategy, description: Specifies how to obtain
        the schema that is to be used for interpreting the data.}
    zh: {description: 指定如何获取用于解释数据的架构。, displayName: 架构访问策略}
  schema-version:
    en: {displayName: Schema Version, description: Specifies the version of the schema
        to lookup in the Schema Registry. If not specified then the latest version
        of the schema will be retrieved.}
    zh: {description: 指定要在架构注册表中查找的架构的版本。如果未指定，则将检索架构的最新版本。, displayName: 架构版本}
  schema-text:
    en: {displayName: Schema Text, description: The text of an Avro-formatted Schema}
    zh: {description: Avro格式架构的文本, displayName: 架构文本}
tags:
  en: [xml, record, reader, parser]
  zh: [xml格式, 记录, 读者, 解析器]
