capabilityDescription: {en: Writes the contents of a RecordSet as CSV data. The first
    line written will be the column names (unless the 'Include Header Line' property
    is false). All subsequent lines will be the values corresponding to the record
    fields., zh: 将记录集的内容作为CSV数据写入。写入的第一行将是列名（除非“Include Header line”属性为false）。所有后续行将是与记录字段相对应的值。}
properties:
  schema-branch:
    en: {displayName: Schema Branch, description: 'Specifies the name of the branch
        to use when looking up the schema in the Schema Registry property. If the
        chosen Schema Registry does not support branching, this value will be ignored.'}
    zh: {description: 指定在“架构注册表”属性中查找架构时要使用的分支的名称。如果所选的架构注册表不支持分支，则将忽略此值。, displayName: 架构分支}
  CSV Format:
    en: {displayName: CSV Format, description: 'Specifies which "format" the CSV data
        is in, or specifies if custom formatting should be used.'}
    zh: {description: 指定CSV数据的“格式”，或指定是否应使用自定义格式。, displayName: CSV格式}
  Quote Character:
    en: {displayName: Quote Character, description: 'The character that is used to
        quote values so that escape characters do not have to be used. If the property
        has been specified via Expression Language but the expression gets evaluated
        to an invalid Quote Character at runtime, then it will be skipped and the
        default Quote Character will be used.'}
    zh: {description: 用于引用值的字符，以便不必使用转义字符。如果已通过表达式语言指定了属性，但表达式在运行时被计算为无效的引号字符，则将跳过该属性，并使用默认的引号字符。,
      displayName: 引号字符}
  Include Header Line:
    en: {displayName: Include Header Line, description: Specifies whether or not the
        CSV column names should be written out as the first line.}
    zh: {description: 指定CSV列名是否应作为第一行写出。, displayName: 包括标题行}
  Value Separator:
    en: {displayName: Value Separator, description: 'The character that is used to
        separate values/fields in a CSV Record. If the property has been specified
        via Expression Language but the expression gets evaluated to an invalid Value
        Separator at runtime, then it will be skipped and the default Value Separator
        will be used.'}
    zh: {description: 用于分隔CSV记录中的值/字段的字符。如果已通过表达式语言指定属性，但表达式在运行时被计算为无效的值分隔符，则将跳过该属性，并使用默认值分隔符。,
      displayName: 值分隔符}
  schema-cache:
    en: {displayName: Schema Cache, description: Specifies a Schema Cache to add the
        Record Schema to so that Record Readers can quickly lookup the schema.}
    zh: {description: 指定要向其中添加记录架构的架构缓存，以便记录读取器可以快速查找架构。, displayName: 架构缓存}
  Record Separator:
    en: {displayName: Record Separator, description: Specifies the characters to use
        in order to separate CSV Records}
    zh: {description: 指定用于分隔CSV记录的字符, displayName: 记录分隔符}
  Timestamp Format:
    en: {displayName: Timestamp Format, description: 'Specifies the format to use
        when reading/writing Timestamp fields. If not specified, Timestamp fields
        will be assumed to be number of milliseconds since epoch (Midnight, Jan 1,
        1970 GMT). If specified, the value must match the Java Simple Date Format
        (for example, MM/dd/yyyy HH:mm:ss for a two-digit month, followed by a two-digit
        day, followed by a four-digit year, all separated by ''/'' characters; and
        then followed by a two-digit hour in 24-hour format, followed by a two-digit
        minute, followed by a two-digit second, all separated by '':'' characters,
        as in 01/01/2017 18:04:15).'}
    zh: {description: '指定读取/写入时间戳字段时使用的格式。如果未指定，则时间戳字段将假定为自纪元（1970年1月1日午夜）以来的毫秒数。如果指定，则该值必须与Java简单日期格式匹配（例如，MM/dd/yyyy
        HH:MM:ss表示两位数的月份，后跟两位数的日期，后跟四位数的年份，均以“/”字符分隔；然后，后跟24小时格式的两位数的小时，后跟两位的分钟，然后是两位数的秒，全部以“：”字符分隔，如2017年1月1日18:04:15所示）。',
      displayName: 时间戳格式}
  Escape Character:
    en: {displayName: Escape Character, description: 'The character that is used to
        escape characters that would otherwise have a specific meaning to the CSV
        Parser. If the property has been specified via Expression Language but the
        expression gets evaluated to an invalid Escape Character at runtime, then
        it will be skipped and the default Escape Character will be used. Setting
        it to an empty string means no escape character should be used.'}
    zh: {description: 用于转义否则对CSV解析器具有特定意义的字符的字符。如果已通过表达式语言指定了属性，但表达式在运行时被计算为无效的转义符，则将跳过该属性，并使用默认的转义符。将其设置为空字符串意味着不应使用转义符。,
      displayName: 转义符}
  Date Format:
    en: {displayName: Date Format, description: 'Specifies the format to use when
        reading/writing Date fields. If not specified, Date fields will be assumed
        to be number of milliseconds since epoch (Midnight, Jan 1, 1970 GMT). If specified,
        the value must match the Java Simple Date Format (for example, MM/dd/yyyy
        for a two-digit month, followed by a two-digit day, followed by a four-digit
        year, all separated by ''/'' characters, as in 01/01/2017).'}
    zh: {description: 指定读取/写入日期字段时使用的格式。如果未指定，日期字段将假定为自纪元（1970年1月1日午夜）以来的毫秒数。如果指定，则该值必须与Java简单日期格式匹配（例如，MM/dd/yyyy表示两位数的月份，后跟两位数的日期，后跟四位数的年份，均由“/”字符分隔，如2017年1月1日）。,
      displayName: 日期格式}
  Schema Write Strategy:
    en: {displayName: Schema Write Strategy, description: Specifies how the schema
        for a Record should be added to the data.}
    zh: {description: 指定应如何将记录的架构添加到数据中。, displayName: 架构写入策略}
  Null String:
    en: {displayName: Null String, description: 'Specifies a String that, if present
        as a value in the CSV, should be considered a null field instead of using
        the literal value.'}
    zh: {description: 指定一个字符串，如果该字符串作为CSV中的值存在，则应将其视为空字段，而不是使用文本值。, displayName: Null字符串}
  Trim Fields:
    en: {displayName: Trim Fields, description: Whether or not white space should
        be removed from the beginning and end of fields}
    zh: {description: 是否应从字段的开头和结尾删除空白, displayName: 修剪字段}
  schema-name:
    en: {displayName: Schema Name, description: Specifies the name of the schema to
        lookup in the Schema Registry property}
    zh: {description: 指定要在“架构注册表”属性中查找的架构的名称, displayName: 架构名称}
  schema-registry:
    en: {displayName: Schema Registry, description: Specifies the Controller Service
        to use for the Schema Registry}
    zh: {description: 指定用于架构注册表的控制器服务, displayName: 架构注册表}
  Time Format:
    en: {displayName: Time Format, description: 'Specifies the format to use when
        reading/writing Time fields. If not specified, Time fields will be assumed
        to be number of milliseconds since epoch (Midnight, Jan 1, 1970 GMT). If specified,
        the value must match the Java Simple Date Format (for example, HH:mm:ss for
        a two-digit hour in 24-hour format, followed by a two-digit minute, followed
        by a two-digit second, all separated by '':'' characters, as in 18:04:15).'}
    zh: {description: '指定读取/写入时间字段时使用的格式。如果未指定，“时间”字段将假定为自纪元（1970年1月1日午夜）以来的毫秒数。如果指定，则该值必须与Java简单日期格式匹配（例如，HH:mm:ss表示24小时格式的两位数小时，后跟两位数分钟，后跟两位秒，均以“：”字符分隔，如18:04:15所示）。',
      displayName: 时间格式}
  Comment Marker:
    en: {displayName: Comment Marker, description: The character that is used to denote
        the start of a comment. Any line that begins with this comment will be ignored.}
    zh: {description: 用于表示注释开头的字符。任何以该注释开头的行都将被忽略。, displayName: 注释标记}
  schema-access-strategy:
    en: {displayName: Schema Access Strategy, description: Specifies how to obtain
        the schema that is to be used for interpreting the data.}
    zh: {description: 指定如何获取用于解释数据的架构。, displayName: 架构访问策略}
  schema-protocol-version:
    en: {displayName: Schema Protocol Version, description: 'The protocol version
        to be used for Schema Write Strategies that require a protocol version, such
        as Hortonworks Schema Registry strategies. Valid protocol versions for Hortonworks
        Schema Registry are integer values 1, 2, or 3.'}
    zh: {description: 用于需要协议版本的架构写入策略的协议版本，例如Hortonworks架构注册表策略。Hortonworks Schema
        Registry的有效协议版本为整数值1、2或3。, displayName: 架构协议版本}
  schema-version:
    en: {displayName: Schema Version, description: Specifies the version of the schema
        to lookup in the Schema Registry. If not specified then the latest version
        of the schema will be retrieved.}
    zh: {description: 指定要在架构注册表中查找的架构的版本。如果未指定，则将检索架构的最新版本。, displayName: 架构版本}
  csvutils-character-set:
    en: {displayName: Character Set, description: The Character Encoding that is used
        to encode/decode the CSV file}
    zh: {description: 用于编码/解码CSV文件的字符编码, displayName: 字符集}
  schema-text:
    en: {displayName: Schema Text, description: The text of an Avro-formatted Schema}
    zh: {description: Avro格式架构的文本, displayName: 架构文本}
  Quote Mode:
    en: {displayName: Quote Mode, description: Specifies how fields should be quoted
        when they are written}
    zh: {description: 指定写入字段时应如何引用字段, displayName: 报价模式}
  Include Trailing Delimiter:
    en: {displayName: Include Trailing Delimiter, description: 'If true, a trailing
        delimiter will be added to each CSV Record that is written. If false, the
        trailing delimiter will be omitted.'}
    zh: {description: 如果为true，则将向写入的每个CSV记录添加尾随分隔符。如果为false，将省略尾随分隔符。, displayName: 包括尾随分隔符}
tags:
  en: [csv, result, set, recordset, record, writer, serializer, row, tsv, tab, separated,
    delimited]
  zh: [csv格式, 后果, 设置, 记录集, 记录, 作家, 串行化器, 一行, tsv公司, 选项卡, 分离的，分离的, 定界的]
