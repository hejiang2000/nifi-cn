relationships:
  success: {en: Relationship for successfully received files., zh: 成功接收文件的关系。}
capabilityDescription: {en: 'Starts an FTP server that listens on the specified port
    and transforms incoming files into FlowFiles. The URI of the service will be ftp://{hostname}:{port}.
    The default port is 2221.', zh: '启动在指定端口上侦听并将传入文件转换为FlowFiles的FTP服务器。服务的URI将是ftp://｛hostname｝：｛port｝。默认端口为2221。'}
properties:
  bind-address:
    en: {displayName: Bind Address, description: 'The address the FTP server should
        be bound to. If not set (or set to 0.0.0.0), the server binds to all available
        addresses (i.e. all network interfaces of the host machine).'}
    zh: {description: FTP服务器应绑定到的地址。如果未设置（或设置为0.0.0.0），服务器将绑定到所有可用地址（即主机的所有网络接口）。,
      displayName: 绑定地址}
  password:
    en: {displayName: Password, description: 'If the Username is set, then a password
        must also be specified. The password provided by the client trying to log
        in to the FTP server will be checked against this password.'}
    zh: {description: 如果设置了用户名，则还必须指定密码。将根据此密码检查尝试登录到FTP服务器的客户端提供的密码。, displayName: 暗语}
  ssl-context-service:
    en: {displayName: SSL Context Service, description: 'Specifies the SSL Context
        Service that can be used to create secure connections. If an SSL Context Service
        is selected, then a keystore file must also be specified in the SSL Context
        Service. Without a keystore file, the processor cannot be started successfully.Specifying
        a truststore file is optional. If a truststore file is specified, client authentication
        is required (the client needs to send a certificate to the server).Regardless
        of the selected TLS protocol, the highest available protocol is used for the
        connection. For example if NiFi is running on Java 11 and TLSv1.2 is selected
        in the controller service as the preferred TLS Protocol, TLSv1.3 will be used
        (regardless of TLSv1.2 being selected) because Java 11 supports TLSv1.3.'}
    zh: {description: 指定可用于创建安全连接的SSL上下文服务。如果选择了SSL上下文服务，则还必须在SSL上下文服务中指定密钥库文件。如果没有密钥库文件，则无法成功启动处理器。指定信任库文件是可选的。如果指定了信任库文件，则需要客户端身份验证（客户端需要向服务器发送证书）。无论选择哪种TLS协议，连接都使用最高可用协议。例如，如果NiFi在Java
        11上运行，并且在控制器服务中选择TLSv1.2作为首选TLS协议，则将使用TLSv1.3（无论选择了TLSv1.2），因为Java 11支持TLSv1.3。,
      displayName: SSL上下文服务}
  listening-port:
    en: {displayName: Listening Port, description: 'The Port to listen on for incoming
        connections. On Linux, root privileges are required to use port numbers below
        1024.'}
    zh: {description: 侦听传入连接的端口。在Linux上，需要root权限才能使用1024以下的端口号。, displayName: 侦听端口}
  username:
    en: {displayName: Username, description: 'The name of the user that is allowed
        to log in to the FTP server. If a username is provided, a password must also
        be provided. If no username is specified, anonymous connections will be permitted.'}
    zh: {description: 允许登录到FTP服务器的用户的名称。如果提供了用户名，还必须提供密码。如果未指定用户名，则允许匿名连接。, displayName: 用户名}
writeAttributes:
  path: {en: 'The path pointing to the file''s target directory. E.g.: file.txt is
      uploaded to /Folder1/SubFolder, then the value of the path attribute will be
      "/Folder1/SubFolder/" (note that it ends with a separator character).', zh: 指向文件目标目录的路径。E、
      g.：文件。txt上载到/Folder1/SubFolder，则路径属性的值将为“/Folder1/SubFolder/”（请注意，它以分隔符结尾）。}
  filename: {en: The name of the file received via the FTP/FTPS connection., zh: 通过FTP/FTPS连接接收的文件的名称。}
tags:
  en: [ingest, FTP, FTPS, listen]
  zh: [摄入, 文件传输协议, 英尺/秒, 听]
