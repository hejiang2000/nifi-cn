relationships:
  original: {en: 'Once all records in an incoming FlowFile have been partitioned,
      the original FlowFile is routed to this relationship.', zh: 一旦传入FlowFile中的所有记录都已分区，原始FlowFile将路由到此关系。}
  success: {en: FlowFiles that are successfully partitioned will be routed to this
      relationship, zh: 成功分区的FlowFiles将路由到此关系}
  failure: {en: 'If a FlowFile cannot be partitioned from the configured input format
      to the configured output format, the unchanged FlowFile will be routed to this
      relationship', zh: 如果无法将FlowFile从配置的输入格式分区为配置的输出格式，则未更改的FlowFile将路由到此关系}
capabilityDescription: {en: 'Receives Record-oriented data (i.e., data that can be
    read by the configured Record Reader) and evaluates the user provided script against
    each record in the incoming flow file. Each record is then grouped with other
    records sharing the same partition and a FlowFile is created for each groups of
    records. Two records shares the same partition if the evaluation of the script
    results the same return value for both. Those will be considered as part of the
    same partition.', zh: 接收面向记录的数据（即，可由配置的记录读取器读取的数据），并根据传入流文件中的每个记录评估用户提供的脚本。然后将每个记录与共享同一分区的其他记录分组，并为每组记录创建FlowFile。如果脚本的计算结果为两个记录的返回值相同，则两个记录共享同一分区。这些将被视为同一分区的一部分。}
properties:
  Script File:
    en: {displayName: Script File, description: Path to script file to execute. Only
        one of Script File or Script Body may be used}
    zh: {description: 要执行的脚本文件的路径。只能使用脚本文件或脚本正文之一, displayName: 脚本文件}
  Script Engine:
    en: {displayName: Script Language, description: The Language to use for the script}
    zh: {description: 脚本使用的语言, displayName: 脚本语言}
  Script Body:
    en: {displayName: Script Body, description: Body of script to execute. Only one
        of Script File or Script Body may be used}
    zh: {description: 要执行的脚本体。只能使用脚本文件或脚本正文之一, displayName: 脚本正文}
  Record Writer:
    en: {displayName: Record Writer, description: The Record Writer to use for serializing
        Records after they have been transformed}
    zh: {description: 转换后用于序列化记录的记录编写器, displayName: 记录编写器}
  Record Reader:
    en: {displayName: Record Reader, description: The Record Reader to use parsing
        the incoming FlowFile into Records}
    zh: {description: 用于将传入的FlowFile解析为记录的记录读取器, displayName: 记录读取器}
  Module Directory:
    en: {displayName: Module Directory, description: Comma-separated list of paths
        to files and/or directories which contain modules required by the script.}
    zh: {description: 包含脚本所需模块的文件和/或目录路径的逗号分隔列表。, displayName: 模块目录}
writeAttributes:
  partition: {en: 'The partition of the outgoing flow file. If the script indicates
      that the partition has a null value, the attribute will be set to the literal
      string "<null partition>" (without quotes). Otherwise, the attribute is set
      to the String representation of whatever value is returned by the script.',
    zh: 传出流文件的分区。如果脚本指示分区具有空值，则属性将设置为文本字符串“＜null partition＞”（不带引号）。否则，该属性将设置为脚本返回的任何值的String表示。}
  record.error.message: {en: This attribute provides on failure the error message
      encountered by the Reader or Writer., zh: 此属性在失败时提供读取器或写入器遇到的错误消息。}
  record.count: {en: The number of records within the flow file., zh: 流文件中的记录数。}
  fragment.index: {en: A one-up number that indicates the ordering of the partitioned
      FlowFiles that were created from a single parent FlowFile, zh: 一个向上的数字，表示从单个父FlowFile创建的分区FlowFile的顺序}
  mime.type: {en: Sets the mime.type attribute to the MIME Type specified by the Record
      Writer, zh: 设置mime。type属性设置为记录编写器指定的MIME类型}
  fragment.count: {en: The number of partitioned FlowFiles generated from the parent
      FlowFile, zh: 从父FlowFile生成的分区FlowFiles的数量}
tags:
  en: [record, partition, script, groovy, jython, python, segment, split, group, organize]
  zh: [记录, 隔断, 剧本, 常规的, jython公司, 蟒蛇, 段, 分裂, 组, 组织]
